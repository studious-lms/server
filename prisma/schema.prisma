// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum AssignmentType {
  HOMEWORK
  QUIZ
  TEST
  PROJECT
  ESSAY
  DISCUSSION
  PRESENTATION
  LAB
  OTHER
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  NONE
}

model School {
  id          String      @id @default(uuid())
  name        String
  logo        File        @relation(references: [id], fields: [logoId])
  logoId      String
  subdomain   String?     @unique
  
  
  users       User[]
  classes     Class[]
}

model User {
  id           String      @id @default(uuid())
  username     String
  email        String
  password     String
  profile      UserProfile?
  verified     Boolean     @default(false)
  role         UserRole    @default(NONE)

  profileId    String?     @unique

  teacherIn   Class[] @relation("UserTeacherToClass")
  studentIn   Class[] @relation("UserStudentToClass")

  submissions Submission[]
  sessions    Session[]
  files       File[]
  assignments Assignment[]
  events      Event[]
  announcements Announcement[]
  notificationsSent Notification[] @relation("SentNotifications")
  notificationsReceived Notification[] @relation("ReceivedNotifications")

  presentAttendance  Attendance[] @relation("PresentAttendance")
  lateAttendance    Attendance[] @relation("LateAttendance")
  absentAttendance  Attendance[] @relation("AbsentAttendance")

  school School? @relation(fields: [schoolId], references: [id])
  schoolId String?

  // Chat relations
  conversationMemberships ConversationMember[]
  sentMessages Message[] @relation("SentMessages")
  mentions Mention[] @relation("UserMentions")
  createdLabChats LabChat[] @relation("CreatedLabChats")

}

model UserProfile {
  id String @id @default(uuid())
  userId String @unique
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  displayName String?
  bio String?
  location String?
  website String?
  profilePicture String?
  profilePictureThumbnail String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

model Class {
  id            String         @id @default(uuid())
  name          String
  subject       String
  color         String?        @default("#3B82F6")
  section       String
  syllabus      String?
  announcements Announcement[]
  assignments   Assignment[]
  attendance    Attendance[]
  events        Event[]
  sections      Section[]
  sessions      Session[]
  students      User[]         @relation("UserStudentToClass")
  teachers      User[]         @relation("UserTeacherToClass")
  markSchemes   MarkScheme[] @relation("ClassToMarkScheme")
  gradingBoundaries GradingBoundary[] @relation("ClassToGradingBoundary")
  draftFiles File[] @relation("ClassDraftFiles")
  classFiles Folder? @relation("ClassFiles")
  labChats LabChat[] @relation("ClassLabChats")

  school    School? @relation(fields: [schoolId], references: [id])
  schoolId  String?
}

model MarkScheme {
  id String @id @default(uuid())
  classId String
  class Class[] @relation("ClassToMarkScheme")
  structured String
  assignments Assignment[]
}

model GradingBoundary {
  id String @id @default(uuid())
  classId String
  class Class[] @relation("ClassToGradingBoundary")
  structured String
  assignments Assignment[]
}

model Folder {
  id String @id @default(uuid())
  name String
  files File[] @relation("FolderFiles")
  childFolders Folder[] @relation("ParentChildFolders")
  parentFolder Folder? @relation("ParentChildFolders", fields: [parentFolderId], references: [id])
  parentFolderId String?
  color String? @default("#3B82F6")
  class Class? @relation("ClassFiles", fields: [classId], references: [id])
  classId String? @unique
}

model File {
  id         String @id @default(uuid())
  name       String
  path       String
  size       Int?
  type       String
  user       User? @relation(fields: [userId], references: [id])
  userId     String?
  uploadedAt DateTime? @default(now())

  // Thumbnail relationship
  thumbnail   File?  @relation("Thumbnail", fields: [thumbnailId], references: [id])
  thumbnailId String? @unique
  originalFile File? @relation("Thumbnail")

  assignment Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String?

  submission Submission? @relation("SubmissionFile", fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId String?

  annotations Submission? @relation("SubmissionAnnotations", fields: [annotationId], references: [id], onDelete: Cascade)
  annotationId String?

  classDraft Class? @relation("ClassDraftFiles", fields: [classDraftId], references: [id], onDelete: Cascade)
  classDraftId String?

  folder Folder? @relation("FolderFiles", fields: [folderId], references: [id], onDelete: Cascade)
  folderId String?

  conversationId String?

  messageId String?
  message Message? @relation("MessageAttachments", fields: [messageId], references: [id], onDelete: Cascade)

  schools      School[]

  schoolDevelopementProgram SchoolDevelopementProgram? @relation("SchoolDevelopementProgramSupportingDocumentation", fields: [schoolDevelopementProgramId], references: [id], onDelete: Cascade)
  schoolDevelopementProgramId String?
}

model Assignment {
  id            String         @id @default(uuid())
  title         String
  instructions  String
  dueDate       DateTime
  createdAt     DateTime?      @default(now())
  modifiedAt    DateTime?      @updatedAt
  teacher       User           @relation(fields: [teacherId], references: [id], onDelete: NoAction)
  teacherId     String
  class         Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId       String
  attachments   File[]
  submissions   Submission[]
  section       Section?       @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId     String?
  graded        Boolean        @default(false)
  maxGrade      Int?          @default(0)
  weight        Float         @default(1)
  type          AssignmentType @default(HOMEWORK)
  inProgress    Boolean        @default(false)
  template      Boolean        @default(false)
  eventAttached Event?        @relation(fields: [eventId], references: [id], onDelete: NoAction)
  eventId       String?
  markScheme    MarkScheme? @relation(fields: [markSchemeId], references: [id], onDelete: Cascade)
  markSchemeId  String?
  order         Int?
  gradingBoundary GradingBoundary? @relation(fields: [gradingBoundaryId], references: [id], onDelete: Cascade)
  gradingBoundaryId String?
}



model Announcement {
  id      String @id @default(uuid())
  remarks String
  teacher User @relation(fields: [teacherId], references: [id])
  teacherId String
  createdAt DateTime @default(now())
  class   Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId String
}

model Submission {
  id      String @id @default(uuid())
  createdAt DateTime @default(now())
  modifiedAt DateTime @default(now())

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String

  student User @relation(fields: [studentId], references: [id])
  studentId String

  attachments File[]  @relation("SubmissionFile")
  annotations File[]  @relation("SubmissionAnnotations")

  gradeReceived Int?

  rubricState String?
  teacherComments String?

  submittedAt DateTime?
  submitted   Boolean? @default(false)
  returned    Boolean? @default(false)
}

model Section {
  id        String @id @default(uuid())
  name      String
  classId   String
  class     Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  assignments Assignment[]
  color String? @default("#3B82F6")
  order Int?
}

model Session {
  id        String @id @default(uuid())
  createdAt DateTime? @default(now())
  expiresAt DateTime?
  userId    String?
  user      User? @relation(fields: [userId], references: [id], onDelete: NoAction)
  classId   String?
  class     Class? @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model Event {
  id        String @id @default(uuid())
  name      String?
  startTime DateTime
  endTime   DateTime
  location  String?
  remarks   String?
  userId    String?
  user      User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  classId   String?
  class     Class? @relation(fields: [classId], references: [id], onDelete: Cascade)
  color         String? @default("#3B82F6")
  assignmentsAttached Assignment[]
  attendance Attendance[]
}

model Attendance {
  id        String   @id @default(uuid())
  date      DateTime @default(now())
  
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   String

  event     Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String?

  present   User[]   @relation("PresentAttendance")
  late      User[]   @relation("LateAttendance")
  absent    User[]   @relation("AbsentAttendance")
}

model Notification {
  id String @id @default(uuid())
  title String
  content String
  createdAt DateTime @default(now())
  senderId String? // no ID means sys
  receiverId String
  read Boolean @default(false)
  sender User? @relation("SentNotifications", fields: [senderId], references: [id])
  receiver User @relation("ReceivedNotifications", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum ConversationType {
  DM
  GROUP
}

enum ConversationRole {
  ADMIN
  MEMBER
}

model Conversation {
  id String @id @default(uuid())
  type ConversationType
  name String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  displayInChat Boolean @default(true)
  
  members ConversationMember[]
  messages Message[]
  labChat LabChat?
}

model LabChat {
  id String @id @default(uuid())
  title String
  context String // JSON string for LLM context
  classId String
  conversationId String @unique
  createdById String // Teacher who created the lab
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  class Class @relation("ClassLabChats", fields: [classId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdBy User @relation("CreatedLabChats", fields: [createdById], references: [id], onDelete: NoAction)
}

model ConversationMember {
  id String @id @default(uuid())
  userId String
  conversationId String
  role ConversationRole @default(MEMBER)
  joinedAt DateTime @default(now())
  lastViewedAt DateTime? // When user last viewed this conversation
  lastViewedMentionAt DateTime? // When user last viewed mentions in this conversation
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, conversationId])
}

model Message {
  id String @id @default(uuid())
  content String
  senderId String
  conversationId String
  createdAt DateTime @default(now())
  
  sender User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  mentions Mention[]
  attachments File[] @relation("MessageAttachments")
}

model Mention {
  id String @id @default(uuid())
  messageId String
  userId String
  createdAt DateTime @default(now())
  
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user User @relation("UserMentions", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
}


model SchoolDevelopementProgram {
  id String @id
  name String
  type String
  address String
  city String
  country String
  numberOfStudents Int
  numberOfTeachers Int
  website String?

  contactName String?
  contactRole String?
  contactEmail String?
  contactPhone String? @default("")
  eligibilityInformation String?
  whyHelp String?
  additionalInformation String?
  submittedAt DateTime? @default(now())
  reviewedAt DateTime?

  status String @default("PENDING") // PENDING, APPROVED, REJECTED, REFERRED

  supportingDocumentation File[] @relation("SchoolDevelopementProgramSupportingDocumentation")
}

model EarlyAccessRequest {
  id String @id @default(uuid())
  email String
  createdAt DateTime @default(now())
  institutionSize String
}